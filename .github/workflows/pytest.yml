name: Testing with pytest

on:
  pull_request:
    branches: [main, dev]
  push:
    branches: [juwels-runner]
jobs:
  test-on-juwels:
    name: Testing with Pytest on self-hosted runner on JUWELS Booster
    if: github.ref == 'refs/heads/juwels-runner'
    runs-on: [self-hosted, linux]
    env:
      GITHUB_WORKSPACE: /p/project1/intertwin/krochak1/itwinai
      SLURM_SCRIPT: /p/project1/intertwin/juwels-selfhosted-runner/RUNNER/batch-pytest.sh
      SLURM_LOGS: /p/project1/intertwin/juwels-selfhosted-runner/RUNNER/slurm-logs
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Submit and monitor SLURM job
        run: |
          cd $GITHUB_WORKSPACE || exit 

          echo "Submitting job..."
          JOBID=$(sbatch --parsable "$SLURM_SCRIPT")
          echo "Submitted as $JOBID"
          echo "JOBID=$JOBID" >> $GITHUB_ENV

          echo "Waiting for job to complete..."
          while squeue -j "$JOBID" 2>/dev/null | grep -q "$JOBID"; do
            sleep 10
          done

          echo "Job $JOBID appears to have finished."

          echo "Querying SLURM exit code..."
          EXIT_CODE=$(sacct -j "${JOBID}.batch" --format=ExitCode -n | awk '{print $1}' | cut -d':' -f1)

          if [[ -z "$EXIT_CODE" ]]; then
            echo "ERROR: Could not retrieve exit code from sacct."
            exit 1
          fi

          if [[ "$EXIT_CODE" -ne 0 ]]; then
            echo "SLURM job failed with exit code $EXIT_CODE"
            exit 1
          else
            echo "SLURM job completed successfully with exit code 0"
          fi

      - name: Read SLURM logs 
        run: |
          echo "=== SLURM STDOUT ==="
          cat "${SLURM_LOGS}/output.${JOBID}.out" || echo "No output file found."

          echo "=== SLURM STDERR ==="
          cat "${SLURM_LOGS}/error.${JOBID}.out" || echo "No error file found."

  test-torch:
    name: Testing with pytest
    runs-on: ubuntu-latest
    steps:
      - name: Maximize Disk Space
        uses: easimon/maximize-build-space@v10
        with:
          # Reserve space on root for docker/dagger cache
          build-mount-path: /docker
          root-reserve-mb: 2048
          overprovision-lvm: false
          swap-size-mb: 4096
          remove-dotnet: true
          remove-android: true
          remove-haskell: true
          remove-codeql: true

      - uses: actions/checkout@v4

      - name: Move Docker directory
        shell: bash 
        run: |
          sudo mv /var/lib/docker /docker/ &&
          sudo ln -s /docker/docker /var/lib/docker &&
          sudo systemctl restart docker

      # Run tests with pytest in a container
      - name: Run Integration Test (development pipeline)
        uses: dagger/dagger-for-github@v7
        with:
          workdir: ci
          verb: call
          args: >-
            build-container
            --context ..
            --dockerfile ../env-files/torch/skinny.Dockerfile
            test-local
            --cmd "pytest,-v,--disable-warnings,-n,logical,/app/tests/,--dist,loadfile,-m,not hpc and not tensorflow"
            logs
          cloud-token: ${{ secrets.DAGGER_CLOUD_TOKEN }}
          version: latest

