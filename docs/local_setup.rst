.. ðŸ’» Local systems
.. -----------------

**Requirements**

* Linux environment. 
* Windows and macOS were never tested.


.. toctree::
   :maxdepth: 5
   

Micromamba installation
+++++++++++++++++++++++

To manage Conda environments we use micromamba, a light weight version of conda.

It is suggested to refer to the `Manual installation guide <https://mamba.readthedocs.io/en/latest/micromamba-installation.html#umamba-install/>`_.

Consider that Micromamba can eat a lot of space when building environments because packages are cached on
the local filesystem after being downloaded. To clear cache you can use `micromamba clean -a`.
Micromamba data are kept under the `$HOME` location. However, in some systems, `$HOME` has a limited storage
space and it would be cleverer to install Micromamba in another location with more storage space.
Thus by changing the `$MAMBA_ROOT_PREFIX` variable. See a complete installation example for Linux below, where the
default `$MAMBA_ROOT_PREFIX` is overridden:


.. code-block:: bash

    cd $HOME

    # Download micromamba (This command is for Linux Intel (x86_64) systems. Find the right one for your system!)
    curl -Ls https://micro.mamba.pm/api/micromamba/linux-64/latest | tar -xvj bin/micromamba

    # Install micromamba in a custom directory
    MAMBA_ROOT_PREFIX='my-mamba-root'
    ./bin/micromamba shell init $MAMBA_ROOT_PREFIX

    # To invoke micromamba from Makefile, you need to add explicitly to $PATH
    echo 'PATH="$(dirname $MAMBA_EXE):$PATH"' >> ~/.bashrc

**Reference**: `Micromamba installation guide <https://mamba.readthedocs.io/en/latest/installation.html#micromamba>`_.


Environment setup
+++++++++++++++++

**Requirements:**

* Linux environment. Windows and macOS were never tested.
* Micromamba: see the installation instructions above.
* VS Code, for development.

Tensorflow
++++++++++

Installation:

.. code-block:: bash

    # Install TensorFlow 2.13
    make tf-2.13

    # Activate env
    micromamba activate ./.venv-tf

Other TF versions are available, using the following targets `tf-2.10`, and `tf-2.11`.


PyTorch (+ Lightning)
+++++++++++++++++++++

Installation:

.. code-block:: bash

    # Install PyTorch + lightning
    make torch-gpu

    # Activate env
    micromamba activate ./.venv-pytorch

Other also CPU-only version is available at the target `torch-cpu`.


Development environment
+++++++++++++++++++++++

This is for developers only. To have it, update the installed `itwinai` package adding the `dev` extra:

.. code-block:: bash

    pip install -e .[dev]


**Test with `pytest`**
To run tests on itwinai package:

.. code-block:: bash

    # Activate env
    micromamba activate ./.venv-pytorch # or ./.venv-tf

    pytest -v -m "not slurm" tests/


However, some tests are intended to be executed only on an HPC system, where SLURM is available. They are marked with "slurm" tag. To run also those tests, use the dedicated job script:

.. code-block:: bash

    sbatch tests/slurm_tests_startscript

    # Upon completion, check the output:
    cat job.err
    cat job.out




.. Workflow orchestrator
.. +++++++++++++++++++++

.. Install the (custom) orchestrator virtual environment.

.. .. code-block:: bash

..     source ~/.bashrc
..     # Create local env
..     make

..     # Activate env
..     micromamba activate ./.venv

.. To run tests on workflows use:

.. .. code-block:: bash

..     # Activate env
..     micromamba activate ./.venv

..     pytest tests/


.. Development env setup
.. ---------------------

.. Requirements:

.. * Linux, macOS environment. Windows was never tested.
.. * Micromamba: see the installation instructions above.
.. * VS Code, for development.

.. Installation:

.. .. code-block:: bash

..     make dev-env

..     # Activate env
..     micromamba activate ./.venv-dev

.. To run tests on itwinai package:

.. .. code-block:: bash

..     # Activate env
..     micromamba activate ./.venv-dev

..     pytest tests/ai/


.. AI environment setup
.. --------------------

.. Requirements:

.. * Linux, macOS environment. Windows was never tested.
.. * Micromamba: see the installation instructions above.
.. * VS Code, for development.

.. **NOTE**: this environment gets automatically setup when a workflow is executed!

.. However, you can also set it up explicitly with:

.. .. code-block:: bash

..     make ai-env

..     # Activate env
..     micromamba activate ./ai/.venv-pytorch

.. Updating the environment files
.. ++++++++++++++++++++++++++++++

.. The files under `ai/env-files/` are of two categories:

.. * Simple environment definition, such as `pytorch-env.yml` and `pytorch-env-gpu.yml`
.. * Lockfiles, such as `pytorch-lock.yml` and `pytorch-gpu-lock.yml`, generated by `conda-lock <https://conda.github.io/conda-lock/cli/gen/>`_.

.. **When you install the ai environment, install it from the lock file!**

.. When the "simple" environment file (e.g., `pytorch-env.yml`) changes, lock it with `conda-lock <https://conda.github.io/conda-lock/cli/gen/>`_:

.. .. code-block:: bash

..     micromamba activate ./.venv

..     make lock-ai

